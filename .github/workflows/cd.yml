name: EC2 deploy from Docker

on:
  push:
    branches: ["QA"]  # Ejecuta cuando haya un push en la rama QA
  pull_request:
    branches: ["Production"]  # Ejecuta cuando se cree un pull request hacia la rama Production

jobs:
  login-and-pull-qa:
    if: github.ref == 'refs/heads/QA' # Ejecuta solo para push en rama QA
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Iniciar sesión en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 3: Construir y empujar la imagen a Docker Hub
      - name: Build and Push Docker image to QA
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/webpage:qa-${{ github.sha }}

  deploy-to-production:
    if: github.event_name == 'pull_request' && github.base_ref == 'Production' # Ejecuta solo en pull request hacia Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image to Production
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/webpage:prod-latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/webpage:prod-latest

  ssh-connect-ec2QA01:
    needs: [login-and-pull-qa]  # Asegura que este paso se ejecute después de login-and-pull-qa
    if: github.ref == 'refs/heads/QA' # Ejecuta solo en push a la rama QA
    runs-on: ubuntu-latest
    steps:
      - name: SSH into EC2 and pull the latest Docker image for QA
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST_QA }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY_QA }}
          script: |
            # Verificar si Docker está instalado
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              sudo systemctl restart docker
            else
              echo "Docker is already installed"
            fi
            
            # Asegurarse de que Docker esté corriendo
            if ! sudo systemctl is-active --quiet docker; then
              sudo systemctl start docker
            fi

            # Descargar la última imagen desde Docker Hub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/webpage:qa-${{ github.sha }}

            # Detener cualquier contenedor en ejecución (si existe)
            sudo docker stop $(docker ps -q) || true

            # Ejecutar el contenedor con la nueva imagen
            sudo docker run -d -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/webpage:qa-${{ github.sha }}

